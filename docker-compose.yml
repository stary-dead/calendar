version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: calendar_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for WebSocket/Channels
  redis:
    image: redis:7-alpine
    container_name: calendar_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend Django
  backend:
    build: ./backend
    container_name: calendar_backend
    expose:
      - "8000"
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - REDIS_URL=${REDIS_URL}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CREATE_DEFAULT_SUPERUSER=${CREATE_DEFAULT_SUPERUSER}
      - DEFAULT_SUPERUSER_USERNAME=${DEFAULT_SUPERUSER_USERNAME}
      - DEFAULT_SUPERUSER_PASSWORD=${DEFAULT_SUPERUSER_PASSWORD}
      - DEFAULT_SUPERUSER_EMAIL=${DEFAULT_SUPERUSER_EMAIL}
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
      - GITHUB_OAUTH_CLIENT_ID=${GITHUB_OAUTH_CLIENT_ID}
      - GITHUB_OAUTH_CLIENT_SECRET=${GITHUB_OAUTH_CLIENT_SECRET}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    command: >
      sh -c "python manage.py migrate &&
             python manage.py create_initial_data &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 calendar_project.asgi:application"

  # Nginx reverse proxy
  nginx:
    build: ./nginx
    container_name: calendar_nginx
    ports:
      - "80:80"
    depends_on:
      - backend
    volumes:
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro

  # Frontend Angular
  frontend:
    build: ./frontend
    container_name: calendar_frontend
    ports:
      - "4200:4200"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
